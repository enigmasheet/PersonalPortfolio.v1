@inject HttpClient Http

<section id="experience" class="experience-section">
    <h2 class="section-title">My Experience</h2>
    <p class="section-description">Here are some of the projects and experiences I've had so far.</p>

    @if (experiences == null)
    {
        <p>Loading experiences...</p>
    }
    else if (!experiences.Any())
    {
        <p>No experiences found.</p>
    }
    else
    {
        <div class="timeline-container">
            <div class="timeline-line"></div>
            <div class="timeline-items">
                @foreach (var exp in experiences.OrderByDescending(e => e.Date))
                {
                    <div class="timeline-item" tabindex="0" aria-label="@($"{exp.Title} at {exp.Company}, from {exp.Date:MMM yyyy} to {(exp.EndDate.HasValue ? exp.EndDate.Value.ToString("MMM yyyy") : "Present")}")">
                        <div class="timeline-marker"></div>
                        <div class="experience-card">
                            <div class="timeline-date">
                                @exp.Date.ToString("MMM yyyy") – @(exp.EndDate.HasValue? exp.EndDate.Value.ToString("MMM yyyy") : "Present")
                            </div>
                            <h3>@exp.Title</h3>
                            <h4 class="company-name">@exp.Company</h4>
                            <p>@exp.Description</p>
                            @if (!string.IsNullOrWhiteSpace(exp.Link))
                            {
                                <p><a href="@exp.Link" target="_blank" rel="noopener noreferrer">View project</a></p>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</section>

@code {
    public class ExperienceModel
    {
        public string? Title { get; set; }
        public string? Company { get; set; }
        public string? Description { get; set; }
        public string? Link { get; set; }
        public DateTime Date { get; set; }
        public DateTime? EndDate { get; set; }
    }

    private List<ExperienceModel> experiences;

    protected override async Task OnInitializedAsync()
    {
        experiences = await Http.GetFromJsonAsync<List<ExperienceModel>>("data/experience.json");
    }
}


<style>
    .experience-section {
        background-color: var(--bg);
        color: var(--text-primary);
        max-width: 700px;
        margin: 4rem auto;
        padding: 0 1rem;
        text-align: center;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .section-title {
        font-size: clamp(1.75rem, 4vw, 2.5rem);
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .section-description {
        margin-bottom: 3rem;
        font-size: clamp(1rem, 1.5vw, 1.125rem);
        color: var(--text-secondary, #666);
    }

    /* Timeline container */
    .timeline-container {
        position: relative;
        padding-left: 40px; /* space for line and markers */
    }

    /* Vertical line */
    .timeline-line {
        position: absolute;
        top: 0;
        left: 18px;
        width: 4px;
        height: 100%;
        background-color: #0078d4;
        border-radius: 2px;
        z-index: 0;
    }

    /* Timeline items container */
    .timeline-items {
        display: flex;
        flex-direction: column;
        gap: 2.5rem;
        position: relative;
        z-index: 1;
    }

    /* Each timeline item */
    .timeline-item {
        position: relative;
        display: flex;
        align-items: flex-start;
        outline: none;
        cursor: default;
        transition: transform 0.2s ease;
    }

        .timeline-item:focus,
        .timeline-item:hover {
            transform: translateX(5px);
        }

    /* Circle marker on the timeline */
    .timeline-marker {
        position: absolute;
        left: 0;
        top: 10px; /* aligns roughly center with card's top content */
        width: 18px;
        height: 18px;
        background-color: #0078d4;
        border-radius: 50%;
        border: 3px solid var(--bg);
        box-shadow: 0 0 8px rgba(0,120,212,0.7);
        z-index: 2;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }

    /* Experience card */
    .experience-card {
        background-color: var(--card-bg);
        padding: 1.5rem 1.25rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        width: 100%;
        max-width: 600px;
        text-align: left;
        margin-left: 40px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        transition: box-shadow 0.3s ease, background-color 0.3s ease;
    }

    .timeline-item:hover .experience-card {
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
    }

    .timeline-date {
        font-weight: 600;
        color: var(--text-secondary, #555);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        font-family: monospace;
    }

    .company-name {
        font-weight: 500;
        color: var(--text-secondary, #555);
        margin-top: -0.3rem;
        margin-bottom: 0.8rem;
        font-size: 1rem;
        font-style: italic;
    }

    .experience-card h3 {
        margin: 0 0 0.5rem 0;
    }

    .experience-card p {
        margin: 0.25rem 0;
        line-height: 1.4;
    }

    .experience-card a {
        color: #0078d4;
        font-weight: 600;
        text-decoration: none;
        transition: color 0.3s ease;
    }

        .experience-card a:hover,
        .experience-card a:focus {
            text-decoration: underline;
            color: #005fa3;
        }

    /* Responsive adjustments */
    @@media (max-width: 600px) {
        .experience-section

    {
        padding: 0 1rem;
        margin: 2rem auto;
    }

    .experience-card {
        max-width: 100%;
        margin-left: 35px;
        padding: 1.25rem 1rem;
    }

    .timeline-line {
        left: 14px;
        width: 3px;
    }

    .timeline-marker {
        left: -4px;
        width: 14px;
        height: 14px;
        border-width: 2px;
    }

    }
</style>
